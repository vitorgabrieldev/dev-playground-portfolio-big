stages:
  # prod
  - deploy
  # homologation
  - deploy_homologation

deploy:
  stage: deploy
  only:
    - main
  image: ubuntu
  before_script:
    - apt update
    - apt install -y sshpass
    - apt install openssh-client
  script:
    - export SSHPASS="$SSH_PASS"
    - echo "Atualizando c처digo no servidor..."
    - sshpass -e ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "cd $FOLDER && git config --global --add safe.directory /var/www/api && git pull && cd framework && composer install && yes | git restore . | composer run generate-api-doc && yes | php artisan migrate && yes | composer run cache-clear | php artisan optimize:clear | php artisan config:cache"

deploy_homologation:
  stage: deploy_homologation
  only:
    - homologation
  image: ubuntu
  before_script:
    - apt update
    - apt install -y sshpass
    - apt install openssh-client
  script:
    - export SSHPASS="$SSH_PASS_HOMOLOG"
    - echo "Atualizando c처digo no servidor..."
    - |
      sshpass -e ssh -o StrictHostKeyChecking=no $SSH_USER_HOMOLOG@$SSH_HOST_HOMOLOG "
        # Instalar o NVM (se ainda n찾o estiver instalado)
        if ! command -v nvm &> /dev/null; then
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
          export NVM_DIR=\"\$HOME/.nvm\"
          [ -s \"\$NVM_DIR/nvm.sh\" ] && \. \"\$NVM_DIR/nvm.sh\"
        fi

        # Instalar e usar a vers찾o 16.20.2 do Node.js
        nvm install 16.20.2
        nvm use 16.20.2

        # Comandos de deploy
        cd $FOLDER_HOMOLOG &&
        git config --global --add safe.directory $FOLDER_HOMOLOG &&
        git pull origin homologation &&
        cd framework &&
        composer install &&
        yes | git restore . &&
        composer run generate-api-doc &&
        yes | php artisan migrate &&
        yes | composer run cache-clear &&
        php artisan optimize:clear &&
        php artisan config:cache &&
        node -v &&
        yarn run homolog
      "